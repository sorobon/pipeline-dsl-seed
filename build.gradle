plugins {
  id "com.mkobit.jenkins.pipelines.shared-library" version "0.10.1"
  id "jacoco"
  id "java"
  id "groovy"
  id("org.jenkins-ci.jpi") version "0.38.0" apply false
}

// In this section you declare where to find the dependencies of your project
repositories {
    // Use 'jcenter' for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    maven { url 'http://bits.netbeans.org/maven2' }
    maven { url 'https://repo.jenkins-ci.org/releases/' }
    jcenter()
    maven { url 'https://mvnrepository.com/artifact/' }

}

// In this section you declare the dependencies for your production and test code
dependencies {
  testImplementation(group: 'junit', name: 'junit', version: '4.12')
  integrationTestImplementation("org.spockframework:spock-core:1.2-groovy-2.4")

  // // integration tests dependecies
  // integrationTestCompile  group: 'org.slf4j', name: 'slf4j-nop', version: '1.7.30'
  // integrationTestCompile  "org.jenkins-ci.plugins:job-dsl:1.77"
  // integrationTestCompile  "org.jenkins-ci.plugins:job-dsl:1.77@jar"
}



allprojects {
  task getJobs {
    doFirst { task ->
      def tree = fileTree(dir: 'jobs', include: '**/config.groovy')
      def gse = new GroovyScriptEngine(".")
      def bindings = new Binding()
      // Initialize global variables
      bindings.setProperty('flavour', null)
      bindings.setProperty('gradle_project_dir',task.project.projectDir)
      tree.forEach{
        def p = gse.run(it.getPath(),bindings)
        jenkins_jobs.addAll(p.jobs)
        jenkins_test_suites.addAll(p.test_suites)
      }
      file("${project.rootDir}/.jobs").text = jenkins_jobs.inspect()
      file("${project.rootDir}/.test_suites").text = jenkins_test_suites.inspect()

    }
  }
  test {
  // dependsOn tasks.showBuildDir
  scanForTestClasses
    //systemProperty 'buildDirectory', files("${project.rootDir}/build")
    testLogging {
      events "PASSED", "FAILED", "SKIPPED"
    }
    scanForTestClasses = true
    // classpath +=  files("${project.rootDir}/build/classes")
  }

  integrationTest {
    testLogging {
      events "PASSED", "FAILED", "SKIPPED"
    }
  }

  sharedLibrary {
    coreVersion = "2.288"
    testHarnessVersion = "2.72"
    pipelineTestUnitVersion = "1.9"
    pluginDependencies {
      // workflowCpsGlobalLibraryPluginVersion = "2.16"
      // workflowJobPluginVersion = "2.40"
      dependency("org.jenkins-ci.plugins","job-dsl","1.77")
      // dependency("org.jenkins-ci.plugins","structs","1.22")
      dependency("org.jenkins-ci.plugins","cloudbees-folder","6.15")
      dependency("org.jenkins-ci.plugins.workflow", "workflow-aggregator", "2.6")
    }
  }
}

task resolveIntegrationTestDependencies(type: org.jenkinsci.gradle.plugins.jpi.TestDependenciesTask) {
    configuration = configurations.integrationTestRuntimeClasspath
    def javaConvention = project.convention.getPlugin(JavaPluginConvention)
    into file("${javaConvention.sourceSets.integrationTest.output.resourcesDir}/test-dependencies")
  }

  tasks.processIntegrationTestResources.dependsOn resolveIntegrationTestDependencies

ext {
  jenkins_jobs =[]
  jenkins_test_suites =[]
}



